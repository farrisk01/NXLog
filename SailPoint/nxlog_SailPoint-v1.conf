#
# Configuration for converting and sending Windows logs
# to AlienVault USM Anywhere.
#
# Last modification: 2025-03-25 by farrisk01@gmail.com
#


define ROOT C:\Program Files\nxlog
define OUTPUT_DESTINATION_ADDRESS [SENSOR IP ADDRESS]
define OUTPUT_DESTINATION_PORT 514
define LOGFILE %ROOT%\data\nxlog.log

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

<Extension fileop>
  Module xm_fileop
  # Check the log file size every 5 minutes and rotate if larger than 1 MB
  <Schedule>
  Every 5 min
  Exec if (file_size('%LOGFILE%') >= 1M) file_cycle('%LOGFILE%', 2);
  </Schedule>
</Extension>

<Extension json>
    Module      xm_json
</Extension>

<Extension syslog>
    Module      xm_syslog
</Extension>

<Input internal>
    Module      im_internal
</Input>

<Input eventlog>
    Module  im_msvistalog
    <QueryXML>
        <QueryList>
            <Query Id='0'>
                <Select Path="Application">*</Select>
                <Select Path="System">*</Select>
                <Select Path="Security">*</Select>
            </Query>
        </QueryList>
    </QueryXML>
    <Exec>
        if ($EventID == 4627) OR ($EventID == 4634) OR ($EventID == 4656) OR ($EventID == 4658) OR ($EventID == 5156) OR ($EventID == 5158)
            drop();
        else if ($Channel == 'Security') and ($EventID == 4624) and ($Version == 1)
            $Message =~ s/\s*An account was successfully logged on.*$/An account was successfully logged on./s;
		else if ($Channel == 'Security') and ($EventID == 4624) and ($Version == 2)
            $Message =~ s/\s*An account was successfully logged on.*$/An account was successfully logged on./s;
		else if ($Channel == 'Security') and ($EventID == 4624)
            $Message =~ s/\s*This event is generated when a logon session is created.*$/An account was successfully logged on./s;
    else if ($Channel == 'Security') and ($EventID == 4625) and ($Version == 0)
            $Message =~ s/\s*An account failed to log on.*$/An account failed to log on./s;
		else if ($Channel == 'Security') and ($EventID == 4625)
            $Message =~ s/\s*This event is generated when a logon request fails.*$/An account failed to log on./s;
		else if ($Channel == 'Security') and ($EventID == 4648) and ($Version == 0)
            $Message =~ s/\s*A logon was attempted using explicit credentials.*$/A logon was attempted using explicit credentials./s;
		else if ($Channel == 'Security') and ($EventID == 4657)
            $Message =~ s/\s*A registry value was modified.*$/A registry value was modified./s;
		else if ($Channel == 'Security') and ($EventID == 4661)
            $Message =~ s/\s*A handle to an object was requested.*$/A handle to an object was requested./s;
    else if ($Channel == 'Security') and ($EventID == 4662)
            $Message =~ s/\s*An operation was performed on an object.*$/An operation was performed on an object./s;
		else if ($Channel == 'Security') and ($EventID == 4663)
            $Message =~ s/\s*An attempt was made to access an object.*$/An attempt was made to access an object./s;
		else if ($Channel == 'Security') and ($EventID == 4672)
            $Message =~ s/\s*Special privileges assigned to new logon.*$/Special privileges assigned to new logon./s;
		else if ($Channel == 'Security') and ($EventID == 4674)
            $Message =~ s/\s*An operation was attempted on a privileged object.*$/An operation was attempted on a privileged object./s;
		else if ($Channel == 'Security') and ($EventID == 4688)
            $Message =~ s/\s*A new process has been created.*$/A new process has been created./s;
		else if ($Channel == 'Security') and ($EventID == 4690)
            $Message =~ s/\s*An attempt was made to duplicate a handle to an object.*$/An attempt was made to duplicate a handle to an object./s;
		else if ($Channel == 'Security') and ($EventID == 4768) and ($Version == 0)
            $Message =~ s/\s*A Kerberos authentication ticket \(TGT\) was requested.*$/A Kerberos authentication ticket (TGT) was requested./s;
		else if ($Channel == 'Security') and ($EventID == 4768)
            $Message =~ s/\s*Certificate information is only provided.*$/A Kerberos authentication ticket (TGT) was requested./s;
		else if ($Channel == 'Security') and ($EventID == 4769) and ($Version == 0)
            $Message =~ s/\s*A Kerberos service ticket was requested.*$/A Kerberos service ticket was requested./s;
		else if ($Channel == 'Security') and ($EventID == 4769)
            $Message =~ s/\s*This event is generated every time access is requested.*$/A Kerberos service ticket was requested./s;
		else if ($Channel == 'Security') and ($EventID == 4770)
            $Message =~ s/\s*A Kerberos service ticket was renewed.*$/A Kerberos service ticket was renewed./s;
    else if ($Channel == 'Security') and ($EventID == 4771) and ($Version == 0)
            $Message =~ s/\s*Kerberos pre-authentication failed.*$/Kerberos pre-authentication failed./s;
		else if ($Channel == 'Security') and ($EventID == 4771)
            $Message =~ s/\s*Certificate information is only provided.*$/Kerberos pre-authentication failed./s;
    else if ($Channel == 'Security') and ($EventID == 4776)
            $Message =~ s/\s*The computer attempted to validate the credentials for an account.*$/The computer attempted to validate the credentials for an account./s;
    else if ($Channel == 'Security') and ($EventID == 4799)
            $Message =~ s/\s*A security-enabled local group membership was enumerated.*$/A security-enabled local group membership was enumerated./s;
		else if ($Channel == 'Security') and ($EventID == 5136)
            $Message =~ s/\s*A directory service object was modified.*$/A directory service object was modified./s;
    else if ($Channel == 'Security') and ($EventID == 5140)
            $Message =~ s/\s*A network share object was accessed.*$/A network share object was accessed./s;
    else if ($Channel == 'Security') and ($EventID == 5145)
            $Message =~ s/\s*A network share object was checked to see whether client can be granted desired access.*$/A network share object was checked to see whether client can be granted desired access./s;
		else if ($Channel == 'Security') and ($EventID == 6272)
            $Message =~ s/\s*Network Policy Server granted access to a user.*$/Network Policy Server granted access to a user./s;
		else if ($Channel == 'Security') and ($EventID == 6278)
            $Message =~ s/\s*Network Policy Server granted full access to a user because the host met the defined health policy.*$/Network Policy Server granted full access to a user because the host met the defined health policy./s;

        # Update the $raw_event field
        $raw_event = $EventTime + ' ' + $Message;
    </Exec>
</Input>

#######################################################################
####                          SAILPOINT                           #####
#######################################################################
<Extension SP_identityiq_csv>
    Module        xm_csv
    Fields	    	Event_Time, Level, Type, Content, Action, Message
    FieldTypes 		string, string, string, string, string, string
    Delimiter     "|"
</Extension>

<Extension SP_IIQNative_csv>
    Module        xm_csv
    Fields	    	Event_Time, Level, Thread, Source, Line, Message
    FieldTypes 		string, string, string, string, string, string
    Delimiter     "|"
</Extension>

<Extension SP_IQTrace_csv>
    Module        xm_csv
    Fields	    	Event_Time, Source, Thread, Level, Message
    FieldTypes 		string, string, string, string, string
    Delimiter     "|"
</Extension>

<Input identityiq_log>
    Module im_file
    File "C:\\Logs\\IdentityIQ\\identityiq.log"
    SavePos TRUE
    <Exec>
        if $raw_event =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+:\d+)\s+(\S+)\s+(.*)$/
        {
          $raw_event = $1 + "|" + $2 + "|" + $3 + "|" + $4 + "|" + $6;\
          SP_identityiq_csv->parse_csv();\
          $Message = $raw_event;\
          $SourceName = "SAILPOINT";\
        }
    </Exec>
</Input>

<Input iiq_native_rule_log>
    Module im_file
    File "C:\\Logs\\IdentityIQ\\IIQ-NativeRule-*.log"
    SavePos TRUE
    <Exec>
        if $raw_event =~ /^\[(.*?)\] \[(.*?)\] \[(.*?)\]\[(.*?)\]\[(.*?)\](.*)$/
        {
          $raw_event = $1 + "|" + $2 + "|" + $3 + "|" + $4 + "|" + $5 + "|" + $6;\
          SP_IIQNative_csv->parse_csv();\
          $Message = $raw_event;\
          $SourceName = "SAILPOINT";\
        }
    </Exec>
</Input>

<Input iqtrace_log>
    Module im_file
    File "C:\\Logs\\IdentityIQ\\IQTrace-*.log"
    SavePos TRUE
    <Exec>
        if $raw_event =~ /^(\S+ \S+)\s+:\s+(\S+)\s+\[ (.*?) ] \S+\s+:\s+\"(.*?)"$/
        {
          $raw_event = $1 + "|" + $2 + "|" + $3 + "|" + $4 + "|" + $5;\
          SP_IQTrace_csv->parse_csv();\
          $Message = $raw_event;\
          $SourceName = "SAILPOINT";\
        }
    </Exec>
</Input>

<Output SailPoint_out>
    Module om_udp
    Host   %OUTPUT_DESTINATION_ADDRESS%
    Port   %OUTPUT_DESTINATION_PORT%
    Exec $Message = to_json(); to_syslog_bsd();
</Output>

# Route to send logs from inputs to SailPoint_out
<Route log_to_syslog>
    Path identityiq_log, iiq_native_rule_log, iqtrace_log => SailPoint_out
</Route>
#######################################################################


<Output out>
Module om_udp
Host        %OUTPUT_DESTINATION_ADDRESS%
Port        %OUTPUT_DESTINATION_PORT%
Exec        $EventTime = integer($EventTime) / 1000000;
Exec        $EventReceivedTime = integer($EventReceivedTime) / 1000000;
Exec        $Message = to_json(); to_syslog_bsd();
</Output>


<Route 1>
Path 	eventlog, internal => out
</Route>
